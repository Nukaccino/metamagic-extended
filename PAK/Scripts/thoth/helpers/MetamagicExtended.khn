local __util = require 'larian.util'

function IsChromaticOrbSpells()
    return SpellId('Projectile_ChromaticOrb') | SpellId('Projectile_ChromaticOrb_Acid') | SpellId('Projectile_ChromaticOrb_Cold')
    | SpellId('Projectile_ChromaticOrb_Fire') | SpellId('Projectile_ChromaticOrb_Lightning') | SpellId('Projectile_ChromaticOrb_Poison')
    | SpellId('Projectile_ChromaticOrb_Thunder')
end

function IsDefaultSpellDamageType(default)
    return ConditionResult(default) & ~IsSpellTransmuted()
end

function IsIgnoredMetaSpells()
    return SpellId('Target_CallLightning') | SpellId('Target_Hex') 
    | SpellId('Projectile_WitchBolt') 
    | SpellId('Zone_Sunbeam')
end

function IsSpellTransmutedAcid()
    return HasStatus('METAMAGIC_TRANSMUTED_ACID', context.Source)
end

function IsSpellTransmutedCold()
    return HasStatus('METAMAGIC_TRANSMUTED_COLD', context.Source)
end

function IsSpellTransmutedFire()
    return HasStatus('METAMAGIC_TRANSMUTED_FIRE', context.Source)
end

function IsSpellTransmutedPoison()
    return HasStatus('METAMAGIC_TRANSMUTED_POISON', context.Source)
end

function IsSpellTransmutedLightning()
    return HasStatus('METAMAGIC_TRANSMUTED_LIGHTNING', context.Source)
end

function IsSpellTransmutedThunder()
    return HasStatus('METAMAGIC_TRANSMUTED_THUNDER', context.Source)
end

function IsSpellTransmuted()
    return IsSpellTransmutedAcid() | IsSpellTransmutedCold() | IsSpellTransmutedFire() | IsSpellTransmutedPoison() | IsSpellTransmutedLightning() | IsSpellTransmutedThunder()
end

function DetachedSpellCheck()
    return HasSpellFlag(SpellFlags.Spell) & (HasSpellFlag(SpellFlags.Concentration) | HasUseCosts('Detachment_Charge')) & ~IsIgnoredMetaSpells()
end

function EmpoweredSpellCheck2()
    return HasSpellFlag(SpellFlags.Spell) & HasFunctor(StatsFunctorType.DealDamage) | IsChromaticOrbSpells()
end

function SeekingSpellCheck()
    return HasSpellFlag(SpellFlags.Spell) & HasFunctor(StatsFunctorType.DealDamage) & HasAttackRoll()
end

function TransmutedSpellCheck()
    return SpellDamageTypeIs(DamageType.Acid) | SpellDamageTypeIs(DamageType.Cold) | SpellDamageTypeIs(DamageType.Fire) | SpellDamageTypeIs(DamageType.Poison) | SpellDamageTypeIs(DamageType.Lightning) | SpellDamageTypeIs(DamageType.Thunder)
end

function Transmuted(element, default)
    default = default or false
    
    if (element == "Acid") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedAcid()
    elseif (element == "Cold") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedCold()
    elseif (element == "Fire") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedFire()
    elseif (element == "Poison") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedPoison()
    elseif (element == "Lightning") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedLightning()
    elseif (element == "Thunder") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedThunder()
    end

    return false
end